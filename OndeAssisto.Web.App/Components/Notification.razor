@inject INotificationService _notificationService
@inject IWebHostEnvironment _env

@if (!(NotificationTriggeredEventArgs is null))
{
    <div class="notification-container @NotificationTriggeredEventArgs.Type">
        <div class="notification-body">
            <p>@NotificationTriggeredEventArgs.Message</p>
            <button @onclick="OnDisposeAsync">
                @iconCloseSvg
            </button>
        </div>
    </div>
}

@code {
    private MarkupString iconCloseSvg;

    public NotificationTriggeredEventArgs NotificationTriggeredEventArgs { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _notificationService.NotificationTriggered += async (_, e) =>
        {
            await InvokeAsync(() =>
            {
                NotificationTriggeredEventArgs = e as NotificationTriggeredEventArgs;
                StateHasChanged();
            });
        };
        iconCloseSvg = (MarkupString)await File.ReadAllTextAsync($"{_env.WebRootPath}/svg/icon-close.svg");
    }

    private async Task OnDisposeAsync()
    {
        await InvokeAsync(() =>
        {
            NotificationTriggeredEventArgs = null;
            StateHasChanged();
        });
    }
}

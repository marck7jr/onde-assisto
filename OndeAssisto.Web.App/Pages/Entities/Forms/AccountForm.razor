@page "/account/form"

@layout ObservableLayout
@inherits ObservableComponent
@inject IHttpClientFactory _clientFactory
@inject NavigationManager _navManager
@inject IStringLocalizer<AccountForm> _localizer
@inject ILocalStorageService _storage

<div class="page-entity-new">
    <EditForm method="post" Model="Account" OnValidSubmit="OnValidSubmitAsync">
        <img src="img/logo.png" id="logo" @onclick="GoToHome" />
        <h3>@_localizer["FormTitle"]</h3>
        <div>
            <label>@_localizer["NameLabel"]</label>
            <input placeholder="@_localizer["NamePlaceholder"]" type="text" @bind="Account.Name" />
        </div>
        <div>
            <label>@_localizer["EmailLabel"]</label>
            <input type="email" placeholder="@_localizer["EmailPlaceholder"]" @bind="Account.Email" />
        </div>
        <div>
            <label>@_localizer["PasswordLabel"]</label>
            <input type="password" placeholder="@_localizer["PasswordPlaceholder"]" @bind="Account.Password" />
        </div>
        <div id="terms">
            <input type="checkbox" @bind="IsDisable" />
            <label>
                @_localizer["TermsMessage"]
                <NavLink>@_localizer["TermsUsage"]</NavLink>
                @_localizer["And"]
                <NavLink>@_localizer["TermsPrivacy"]</NavLink>.
            </label>
        </div>
        <button class="button-primary" type="submit" disabled="@(!IsDisable)">
            <p>@_localizer["ButtonText"]</p>
        </button>
    </EditForm>
</div>

@code {
    private HttpClient _client;
    private ClaimsPrincipal user { get; set; }
    private bool isDisable = false;
    private Account account;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public bool IsDisable { get => isDisable; set => Set(ref isDisable, value); }
    public Account Account { get => account; set => Set(ref account, value); }

    protected override async Task OnInitializedAsync()
    {
        Account = new Account();
        _client = _clientFactory.CreateClient("api");
        user = (await authenticationStateTask).User;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (await _storage.GetItemAsync<string>(nameof(JwtTokenAccessData.AccessToken)) is string token)
        {
            _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(JwtBearerDefaults.AuthenticationScheme, token);
        }

        if (firstRender && user.Identity.IsAuthenticated)
        {
            var response = await _client.GetAsync($"account");
            if (response.IsSuccessStatusCode)
            {
                Account = JsonSerializer.Deserialize<Account>(await response.Content.ReadAsStringAsync(), new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }
        }
    }


    public async Task OnValidSubmitAsync()
    {
        this.IsDisable = true;
        this.Account.Role = AccountRoleType.User.ToString();
        var content = new StringContent(JsonSerializer.Serialize<Account>(this.Account), Encoding.UTF8, "application/json");

        HttpResponseMessage response;

        if (user.Identity.IsAuthenticated)
        {
            response = await _client.PutAsync("account", content);
            await _storage.RemoveItemAsync(nameof(JwtTokenAccessData.AccessToken));
        }
        else
        {
            response = await _client.PostAsync("account", content);
        }

        if (response.IsSuccessStatusCode)
        {
            _navManager.NavigateTo("/");
        }
        else
        {
            var code = (int)response.StatusCode;
        }
    }

    public void GoToHome()
    {
        _navManager.NavigateTo("/", true);
    }
}

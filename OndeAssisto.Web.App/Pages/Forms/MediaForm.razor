@page "/medias/form"
@page "/medias/form/{guid:guid}"

@layout ObservableLayout
@inherits ObservableComponent
@inject IHttpClientFactory _clientFactory
@inject NavigationManager _navManager
@inject IStringLocalizer<MediaForm> _localizer
@inject ILocalStorageService _storage

<AuthorizeView Roles="@($"{AccountRoleType.Administrator}, {AccountRoleType.User}")">
    <div class="page-entity-new">
        <EditForm Context="editContext" method="post" Model="Media" OnValidSubmit="OnValidSubmitAsync">
            <img src="img/logo.png" id="logo" @onclick="GoToHome" />
            <h3>@_localizer["FormTitle"]</h3>
            <div>
                <label>@_localizer["WorkLabel"]</label>
                <input placeholder="@_localizer["WorkPlaceholder"]" list="works" type="text" @bind="Media.Work.Name" />
                <datalist id="works">
                    @foreach (var work in _works)
                    {
                        <option value="@work.Name" />
                    }
                </datalist>
            </div>
            <div>
                <label>@_localizer["PlatformLabel"]</label>
                @foreach(var platform in Media.Platforms)
                {
                    <input placeholder="@_localizer["PlatformPlaceholder"]" list="platforms" @bind="platform.Name" />
                }
                <datalist id="platforms">
                    @foreach (var platform in _platforms)
                    {
                        <option value="@platform.Name" />
                    }
                </datalist>
                <button class="button-secondary" type="button" @onclick="AddPlatform">
                    <p>+</p>
                </button>
            </div>
            <button class="button-primary" type="submit">
                <p>@_localizer["ButtonText"]</p>
            </button>
        </EditForm>
    </div>
</AuthorizeView>

@code {
    private HttpClient _client;
    private List<Work> _works = new List<Work>();
    private List<Platform> _platforms = new List<Platform>();

    [CascadingParameter]
    private Task<AuthenticationState> _authentication { get; set; }

    [Parameter]
    public Guid Guid { get; set; }
    public Media Media { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Media = new Media();

        _client = _clientFactory.CreateClient("api");
        _works = JsonSerializer.Deserialize<List<Work>>(await _client.GetStringAsync("works"), new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        _platforms = JsonSerializer.Deserialize<List<Platform>>(await _client.GetStringAsync("platforms"), new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (await _storage.GetItemAsync<string>(nameof(JwtTokenAccessData.AccessToken)) is string token)
        {
            _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(JwtBearerDefaults.AuthenticationScheme, token);
        }

        if (Guid != Guid.Empty && firstRender)
        {
            var response = await _client.GetAsync($"works/{Guid}");
            if (response.IsSuccessStatusCode)
            {
                Media = JsonSerializer.Deserialize<Media>(await response.Content.ReadAsStringAsync(), new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }
        }
    }

    public void AddPlatform()
    {
        Media.Platforms.Add(new Platform());
        StateHasChanged();
    }

    public async Task OnValidSubmitAsync()
    {
        if (await _authentication is AuthenticationState authentication && authentication.User.Identity.IsAuthenticated)
        {
            Media.Account.Guid = Guid.Parse(authentication.User.FindFirst(ClaimTypes.NameIdentifier).Value);
        }
        Media.Work.Guid = _works.FirstOrDefault(x => x.Name == Media.Work.Name).Guid;
        Media.Platforms.ForEach(x => x = _platforms.FirstOrDefault(y => x.Guid == y.Guid));
        var content = new StringContent(JsonSerializer.Serialize<Media>(Media), Encoding.UTF8, "application/json");

        HttpResponseMessage response;
        if (Guid != Guid.Empty)
        {
            response = await _client.PutAsync("medias", content);
        }
        else
        {
            response = await _client.PostAsync("medias", content);
        }

        if (response.IsSuccessStatusCode)
        {
            _navManager.NavigateTo("/");
        }
        else
        {
            var code = (int)response.StatusCode;
        }
    }

    public void GoToHome()
    {
        _navManager.NavigateTo("/", true);
    }
}
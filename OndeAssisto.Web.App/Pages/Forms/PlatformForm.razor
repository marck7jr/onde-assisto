@page "/platforms/form"
@page "/platforms/form/{guid:guid}"

@layout ObservableLayout
@inherits ObservableComponent
@inject IHttpClientFactory _clientFactory
@inject NavigationManager _navManager
@inject IStringLocalizer<PlatformForm> _localizer
@inject ILocalStorageService _storage

<AuthorizeView>
    <div class="page-entity-new">
        <EditForm method="post" Context="editContext" Model="Platform" OnValidSubmit="OnValidSubmitAsync">
            <img src="img/logo.png" id="logo" @onclick="GoToHome" />
            <h3>@_localizer["FormTitle"]</h3>
            <div>
                <label>@_localizer["NameLabel"]</label>
                <InputText placeholder="@_localizer["NameLabelPlaceholder"]" type="text" @bind-Value="Platform.Name" />
            </div>
            <div>
                <label>@_localizer["LogoLabel"]</label>
                <InputText placeholder="@_localizer["NameLogoPlaceholder"]" @bind-Value="Platform.Logo" />
            </div>
            <div>
                <label>@_localizer["SiteLabel"]</label>
                <InputText placeholder="@_localizer["NameSitePlaceholder"]" @bind-Value="Platform.Site" />
            </div>
            <button class="button-primary" type="submit">
                <p>@_localizer["ButtonText"]</p>
            </button>
        </EditForm>
    </div>
</AuthorizeView>

@code {
    private HttpClient _client;
    private Platform platform;

    [Parameter]
    public Guid Guid { get; set; }
    public Platform Platform { get => platform; set => Set(ref platform, value); }

    protected override void OnInitialized()
    {
        _client = _clientFactory.CreateClient("api");
        Platform = new Platform();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (await _storage.GetItemAsync<string>(nameof(JwtTokenAccessData.AccessToken)) is string token)
        {
            _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(JwtBearerDefaults.AuthenticationScheme, token);
        }

        if (Guid != Guid.Empty && firstRender)
        {
            var response = await _client.GetAsync($"platforms/{Guid}");
            if (response.IsSuccessStatusCode)
            {
                Platform = JsonSerializer.Deserialize<Platform>(await response.Content.ReadAsStringAsync(), new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }
        }
    }

    public async Task OnValidSubmitAsync()
    {
        var content = new StringContent(JsonSerializer.Serialize<Platform>(this.Platform), Encoding.UTF8, "application/json");//serializar em json com o objetivo de enviar para o controler e depois persisitir no banco
        HttpResponseMessage response;
        if (Guid != Guid.Empty)
        {
            response = await _client.PutAsync("platforms", content);
        }
        else
        {
            response = await _client.PostAsync("platforms", content);
        }

        if (response.IsSuccessStatusCode)
        {
            _navManager.NavigateTo("/");
        }
        else
        {
            var code = (int)response.StatusCode;
        }
    }

    public void GoToHome()
    {
        _navManager.NavigateTo("/home", true);
    }
}

@page "/genres/form"
@page "/genres/form/{guid:guid}"

@layout ObservableLayout
@inherits ObservableComponent
@inject IHttpClientFactory _clientFactory
@inject NavigationManager _navManager
@inject IStringLocalizer<GenreForm> _localizer
@inject ILocalStorageService _storage

<AuthorizeView Roles="@(AccountRoleType.Administrator.ToString())">
    <div class="page-entity-new">
        <EditForm Context="editContext" method="post" Model="Genre" OnValidSubmit="OnValidSubmitAsync">
            <img src="img/logo.png" id="logo" @onclick="GoToHome" />
            <h3>@_localizer["FormTitle"]</h3>
            <div>
                <label>@_localizer["NameLabel"]</label>
                <input type="text" placeholder="@_localizer["NamePlaceholder"]" @bind="Genre.Name" />
            </div>
            <button class="button-primary" type="submit">
                <p>@_localizer["ButtonText"]</p>
            </button>
        </EditForm>
    </div>
</AuthorizeView>

@code {
    private HttpClient _client;

    [Parameter]
    public Guid Guid { get; set; }
    public Genre Genre { get; set; }

    protected override void OnInitialized()
    {
        Genre = new Genre();
        _client = _clientFactory.CreateClient("api");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (await _storage.GetItemAsync<string>(nameof(JwtTokenAccessData.AccessToken)) is string token && firstRender)
        {
            _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(JwtBearerDefaults.AuthenticationScheme, token);
        }

        if (Guid != Guid.Empty && firstRender)
        {
            var response = await _client.GetAsync($"genres/{Guid}");
            if (response.IsSuccessStatusCode)
            {
                Genre = JsonSerializer.Deserialize<Genre>(await response.Content.ReadAsStringAsync(), new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }
        }

    }

    public async Task OnValidSubmitAsync()
    {
        var content = new StringContent(JsonSerializer.Serialize<Genre>(Genre), Encoding.UTF8, "application/json");
        var response = await _client.PostAsync("genres", content);

        if (response.IsSuccessStatusCode)
        {
            _navManager.NavigateTo("/");
        }
        else
        {
            var code = (int)response.StatusCode;
        }
    }

    public void GoToHome()
    {
        _navManager.NavigateTo("/", true);
    }
}
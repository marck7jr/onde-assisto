@page "/works/form"
@page "/works/form/{guid:guid}"

@layout ObservableLayout
@inherits ObservableComponent
@inject IHttpClientFactory _clientFactory
@inject NavigationManager _navManager
@inject IStringLocalizer<WorkForm> _localizer
@inject ILocalStorageService _storage

<AuthorizeView Roles="@($"{AccountRoleType.Administrator}, {AccountRoleType.User}")">
    <div class="page-entity-new">
        <EditForm Context="editContext" method="post" Model="Work" OnValidSubmit="OnValidSubmitAsync">
            <img src="img/logo.png" id="logo" @onclick="GoToHome" />
            <h3>@_localizer["FormTitle"]</h3>
            <div>
                <label>@_localizer["NameLabel"]</label>
                <input placeholder="@_localizer["NamePlaceholder"]" type="text" @bind="Work.Name" />
            </div>
            <div>
                <label>@_localizer["CoverLabel"]</label>
                <input placeholder="@_localizer["CoverPlaceholder"]" type="text" @bind="Work.Cover" />
            </div>
            <div>
                <label>@_localizer["DescriptionLabel"]</label>
                <InputTextArea placeholder="@_localizer["DescriptionPlaceholder"]" @bind-Value="Work.Description" />
            </div>
            <div>
                <label>@_localizer["ReleaseDateLabel"]</label>
                <InputDate TValue="DateTime" @bind-Value="Work.ReleaseDate" />
            </div>
            <div>
                <label>@_localizer["AuthorLabel"]</label>
                <input @bind="Work.Author.Name" list="authors"/>
                <datalist id="authors">
                    @foreach (var author in _authors)
                    {
                        <option value="@author.Name"/>
                    }
                </datalist>
            </div>
            <button class="button-primary" type="submit">
                <p>@_localizer["SubmitButtonText"]</p>
            </button>
        </EditForm>
    </div>
</AuthorizeView>

@code {
    private HttpClient _client;
    private List<Author> _authors = new List<Author>();

    [Parameter]
    public Guid Guid { get; set; }
    public Work Work { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Work = new Work();

        _client = _clientFactory.CreateClient("api");
        var result = await _client.GetAsync("authors");
        _authors = JsonSerializer.Deserialize<List<Author>>(await result.Content.ReadAsStringAsync(), new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (await _storage.GetItemAsync<string>(nameof(JwtTokenAccessData.AccessToken)) is string token)
        {
            _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(JwtBearerDefaults.AuthenticationScheme, token);
        }

        if (Guid != Guid.Empty && firstRender)
        {
            var response = await _client.GetAsync($"works/{Guid}");
            if (response.IsSuccessStatusCode)
            {
                Work = JsonSerializer.Deserialize<Work>(await response.Content.ReadAsStringAsync(), new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }
        }
    }


    public async Task OnValidSubmitAsync()
    {
        Work.Author = _authors.FirstOrDefault(x => x.Name == Work.Author.Name);
        var content = new StringContent(JsonSerializer.Serialize<Work>(this.Work), Encoding.UTF8, "application/json");

        HttpResponseMessage response;
        if (Guid != Guid.Empty)
        {
            response = await _client.PutAsync("works", content);
        }
        else
        {
            response = await _client.PostAsync("works", content);
        }

        if (response.IsSuccessStatusCode)
        {
            _navManager.NavigateTo("/");
        }
        else
        {
            var code = (int)response.StatusCode;
        }
    }

    public void GoToHome()
    {
        _navManager.NavigateTo("/", true);
    }
}
